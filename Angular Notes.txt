
733302
222236
---->ng  new  angularctsproj


---->ng serve   --o



Change Port
-----------
ng serve --port 2222

Angular  with Bootstrap
-------------------------
Install the Bootstrap 4 using the following command.

npm install bootstrap --save  

Now, include the bootstrap 4 inside the angular.json file inside styles array.

"styles": [  
    "./node_modules/bootstrap/dist/css/bootstrap.min.css",  
    "src/styles.css"  
],  


Angular Databinding
-------------------
Databinding is a powerful feature of Angular. Angular Databinding is used for communication. 
It is used to communicate between your TypeScript code (your business logic) and the other 
component which is shown to the users i.e. HTML layout.

Databinding is necessary because when we write the code in TypeScript, it is compiled to JavaScript and the result is shown on HTML layout. 
Thus, to show the correct and spontaneous result to the users, a proper communication is necessary. 
That's why databinding is used in Angular.

There is two types of databinding:


One-way databinding
-------------------
One way databinding is a simple one way communication where HTML template is changed when we make changes in TypeScript code.

Or

In one-way databinding, the value of the Model is used in the View (HTML page) but you can't update Model from the View. 
Angular Interpolation / String Interpolation, Property Binding, and Event Binding are the example of one-way databinding.

Two-way databinding
-------------------
In two-way databinding, automatic synchronization of data happens between the Model and the View. Here, change is reflected in both components. 
Whenever you make changes in the Model, it will be reflected in the View and when you make changes in View, it will be reflected in Model.

This happens immediately and automatically, ensures that the HTML template and the TypeScript code are update










String Interpolation in Angular
-------------------------------
String Interpolation is a one-way databinding technique which is used to output the data from a TypeScript code to HTML template (view).
It uses the template expression in double curly braces to display the data from the component to the view. 
String interpolation adds the value of a property from the component.

Syntax:

{{ data }}


app.component.ts file
---------------------
import { Component } from '@angular/core';    
@Component({    
  selector: 'app-root',    
  templateUrl: './app.component.html',    
  styleUrls: ['./app.component.css']    
})    
export class AppComponent {    
  title = 'Data binding example using String Interpolation';    
}    

app.component.html
-------------------
<h2>    
  {{ title }}    
</h2>

app.component.ts file
---------------------

->String Interpolation can be used to resolve some other expressions too.

Example2:

import { Component } from '@angular/core';    
@Component({    
  selector: 'app-root',    
  templateUrl: './app.component.html',    
  styleUrls: ['./app.component.css']    
})    
export class AppComponent {    
  title = 'Data binding example using String Interpolation';    
    numberA: number = 10;    
    numberB: number = 20;    
  }    

app.component.html:
-------------------
<h2>Calculation is : {{ numberA + numberB }}</h2>  

Ex3:

app.component.ts file
---------------------
import { Component } from '@angular/core';    
@Component({    
  selector: 'app-root',    
  templateUrl: './app.component.html',    
  styleUrls: ['./app.component.css']    
})    
export class AppComponent {    
  title = 'Data binding example using String Interpolation';    
  numberA: number = 10;    
  numberB: number = 20;    
  addTwoNumbers() {    
    return this.numberA + this.numberB;    
  }    
}

app.component.html:
-------------------
<h2>Calculation is : {{ addTwoNumbers() }}</h2>  

Property Binding in Angular
---------------------------
Property Binding is also a one-way data binding technique.
 In property binding, we bind a property of a DOM element to a field which is a defined property in our component TypeScript code.
 Actually Angular internally converts string interpolation into property binding.

Syntax

<img [src]="imgUrl" />
 Example:
app.componnt.ts file 
--------------------

import { Component } from '@angular/core';    
@Component({    
  selector: 'app-root',    
  templateUrl: './app.component.html',    
  styleUrls: ['./app.component.css']    
})    
export class AppComponent {    
  title = "Data binding using Property Binding";      
  imgUrl="https://www.w3schools.com/images/picture.jpg";    
}   

app.component.html
------------------

<h2>{{ title }}</h2> <!-- String Interpolation -->    
<img [src]="imgUrl" /> <!-- Property Binding -->

Event Binding in Angular
--------------------------
In Angular, event binding is used to handle the events raised from the DOM like button click, mouse move etc.
When the DOM event happens (eg. click, change, keyup), it calls the specified method in the component.
In the following example, the cookBacon() method from the component is called when the button is clicked:

For example:

<button (click)="cookBacon()"></button>  


app.component.ts file 
---------------------
import { Component } from '@angular/core';    
@Component({    
  selector: 'app-root',    
  templateUrl: './app.component.html',    
  styleUrls: ['./app.component.css']    
})    
export class AppComponent {      
  onSave($event){    
    console.log("Save button is clicked!", $event);    
  }    
}     

app.component.html:
-------------------
<h2> Event Binding Example</h2>  
<button (click)="onSave($event)">Save</button> <!--Event Binding-->  


Event Bubbling
--------------
Event bubbling is used to specify an order in which event handlers are called when one element is nested inside a second element, 
and both elements have registered a listener for the same event (i.e. click)

app.component.ts file:
---------------------
import { Component } from '@angular/core';    
@Component({    
  selector: 'app-root',    
  templateUrl: './app.component.html',    
  styleUrls: ['./app.component.css']    
})    
export class AppComponent {      
  onSave($event){    
    console.log("Save button is clicked!", $event);    
  }    
  onDivClick(){    
    console.log("DIV is clicked!");    
  }    
}    

app.component.html:
------------------
<h2>Event Bubbling Example</h2>    
<!-- Event Bubbling -->    
<div (click)="onDivClick()">    
  <button (click)="onSave($event)">Save</button>  <!-- Event Binding -->    
</div>  



Two way Data Binding in Angular
------------------------------
We have seen that in one-way data binding any change in the template (view) were not be reflected in the component TypeScript code.
To resolve this problem, Angular provides two-way data binding. 
The two-way binding has a feature to update data from component to view and vice-versa.

In two-way databinding, automatic synchronization of data happens between the Model and the View.
Here, change is reflected in both components.
Whenever you make changes in the Model, it will be reflected in the View and when you make changes in View, 
it will be reflected in Model.

In two way data binding, property binding and event binding are combined together.

Syntax:
[(ngModel)] = "[property of your component]"




app.module.ts file
------------------
import { BrowserModule } from '@angular/platform-browser';    
import { NgModule } from '@angular/core';    
import {FormsModule} from '@angular/forms';    
import { AppComponent } from './app.component';     
@NgModule({    
  declarations: [    
    AppComponent    
  ],    
  imports: [    
    BrowserModule,    
    FormsModule    
  ],    
  providers: [],    
  bootstrap: [AppComponent]    
})    
export class AppModule { }  

app.component.ts file:
---------------------
import { Component } from "@angular/core";    
@Component({    
  selector: "app-root",    
  templateUrl: "./app.component.html",    
  styleUrls: ["./app.component.css"]    
})    
export class AppComponent {    
  fullName: string = "Hello Angular";    
}    


app.component.html file:
-----------------------
<h2>Two-way Binding Example</h2>    
   <input [(ngModel)]="fullName" /> <br/><br/>    
<p> {{fullName}} </p> 



============================================================================================








app.module.ts
-------------
declare module "@angular/core" {
    interface ModuleWithProviders<T = any> {
      ngModule: Type<T>;
      providers?: Provider[];
    }
  }
  


  "strictPropertyInitialization": false,


